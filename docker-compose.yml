networks:
  global-network:
    driver: bridge

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP
      - "15672:15672" # Web UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    networks:
      - global-network

  auth-db:
    image: postgres:16.1-alpine3.19
    container_name: auth-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - global-network

  product-db:
    image: postgres:16.1-alpine3.19
    container_name: product-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - global-network

  inventory-db:
    image: postgres:16.1-alpine3.19
    container_name: inventory-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./scripts/db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - global-network

  coordinator-service:
    build: ./coordinator_service
    container_name: coordinator-service
    environment:
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./coordinator_service/src:/app/src
    networks:
      - global-network
    depends_on:
      - auth-service
      - rabbitmq

  api-gateway:
    build: ./api_gateway
    container_name: api-gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs
    networks:
      - global-network
    depends_on:
      - coordinator-service

  auth-service:
    build: ./auth_service
    container_name: auth-service
    environment:
      DATABASE_URL: ${AUTH_DEV_DATABASE_URL}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      DB_ENCRYPTION_KEY: ${DB_ENCRYPTION_KEY}
    volumes:
      - ./auth_service/src:/app/src
    networks:
      - global-network
    depends_on:
      auth-db:
        condition: service_healthy

  inventory-service:
    build: ./inventory_service
    container_name: inventory-service
    environment:
      DATABASE_URL: ${PRODUCT_DEV_DATABASE_URL}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      DB_ENCRYPTION_KEY: ${DB_ENCRYPTION_KEY}
    command: pdm run python -m src.main.py
    networks:
      - global-network
    volumes:
      - ./inventory_service/src:/app/src
    depends_on:
      inventory-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  product-service:
    build: ./product_service
    container_name: product-service
    environment:
      DATABASE_URL: ${PRODUCT_DEV_DATABASE_URL}
      RABBITMQ_PORT: ${RABBITMQ_PORT}
      RABBITMQ_HOST: ${RABBITMQ_HOST}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      DB_ENCRYPTION_KEY: ${DB_ENCRYPTION_KEY}
    command: pdm run python -m src.main.py
    volumes:
      - ./product_service/src:/app/src
    networks:
      - global-network
    depends_on:
      product-db:
        condition: service_healthy
      rabbitmq:
        condition: service_started

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    environment:
      ADMINER_DEFAULT_SERVER: auth-db
    depends_on:
      - auth-db
    networks:
      - global-network